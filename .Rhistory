}
nleqslv(x = c(1e-8, 1e-6, 0.001, 0.1, 0.001),
fn = bicarbonate,
control = list(xtol = 1e-12, ftol = 1e-12))
nleqslv(x = c(0.1, 0.1, 0.1, 0.1, 0.1),
fn = bicarbonate,
control = list(xtol = 1e-12, ftol = 1e-12))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate, method = "Newton",
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate,global = "cline",
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate,global = "dbldog",
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = c(1e-8, 1e-6, 0.001, 0.1, 0.001),
fn = bicarbonate,
control = list(xtol = 1e-12, ftol = 1e-12))
nleqslv(x = c(1e-7, 1e-7, 0.001, 0.1, 0.001),
fn = bicarbonate,
control = list(xtol = 1e-12, ftol = 1e-12))
nleqslv(x = c(1e-7, 1e-7, 0.001, 0.1, 0.001),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
# find the pH of monotprotic weak acid
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka = 6.2e-10
# 2: provide total concentration for all mass balance equations
conc = 0.10
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
HA = conc/(1 + Ka/H3O)
A = conc - HA
# 5: define an error function using charge balance
error = abs(H3O - OH - A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$HA[id]
df$A[id]
df$error[id]
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "error", lwd = 2, col = "blue")
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:6], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:6]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, and 2*conc for A
conc = 0.10
conc_counter = 0
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, H)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, and 2*conc for A
conc = 0.10
conc_counter = 0.1
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, and 2*conc for A
conc = 1e-6
conc_counter = conc
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system (H2A, HA, A)
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, 2*conc for A,
# for mixture of H2A and HA or mixture of HA and A, conc is sum
# of two concentrations and conc_counter is concentration of HA
# for mixture of H2A and HA, and sum of conc of HA and 2*A for
# mixture of HA and A
conc = 0.2
conc_counter = 0.1
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of monoprotic system
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka = 6.2e-10
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for HA, and conc for A, for mixture of HA and A
# conc is sum of two concentrations and conc_counter is
# concentration of A
conc = 0.10
conc_counter = 0.10
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
HA = conc/(1 + Ka/H3O)
A = conc - HA
# 5: define an error function using charge balance
error = abs(H3O - OH - A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:6], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:6]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of monoprotic system
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka = 6.2e-10
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for HA, and conc for A, for mixture of HA and A
# conc is sum of two concentrations and conc_counter is
# concentration of A
conc = 0.10
conc_counter = 0.10
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
HA = conc/(1 + Ka/H3O)
A = conc - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:6], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:6]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system (H2A, HA, A)
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, 2*conc for A,
# for mixture of H2A and HA or mixture of HA and A, conc is sum
# of two concentrations and conc_counter is concentration of HA
# for mixture of H2A and HA, and sum of conc of HA and 2*A for
# mixture of HA and A
conc = 0.1
conc_counter = 0
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system (H2A, HA, A)
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, 2*conc for A,
# for mixture of H2A and HA or mixture of HA and A, conc is sum
# of two concentrations and conc_counter is concentration of HA
# for mixture of H2A and HA, and sum of conc of HA and 2*A for
# mixture of HA and A
conc = 0.1
conc_counter = 0.1
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
# find the pH of diprotic system (H2A, HA, A)
# 1: provide equilibrium constants for all equilibrium reactions
Kw = 1.00e-14
Ka1 = 4.3e-7
Ka2 = 4.8e-11
# 2: provide total concentration for all mass balance equations
# conc_counter = 0 for H2A, conc for HA, 2*conc for A,
# for mixture of H2A and HA or mixture of HA and A, conc is sum
# of two concentrations and conc_counter is concentration of HA
# for mixture of H2A and HA, and sum of conc of HA and 2*A for
# mixture of HA and A
conc = 0.1
conc_counter = 0.2
# 3: set up master variable
pH = seq(1, 14, 0.001)
# 4: calculate concentrations for all species in system using
# equilibrium constants and mass balance equations
H3O = 10^-pH
OH = Kw/H3O
H2A = conc/(1 + Ka1/H3O + Ka1*Ka2/H3O^2)
HA = conc/(H3O/Ka1 + 1 + Ka2/H3O)
A = conc - H2A - HA
# 5: define an error function using charge balance
error = abs(H3O + conc_counter - OH - HA - 2*A)
# 6: gather all results into data frame
df = data.frame(pH, error, H3O, OH, H2A, HA, A)
# 7: find index for the minimum error (error closest to zero)
id = which.min(df$error)
id
# 8: report out all values
df$pH[id]
df$H3O[id]
df$OH[id]
df$H2A[id]
df$HA[id]
df$A[id]
df$error[id]
# 9: plot error function
plot(df$pH, log10(df$error), type = "l", xlab = "pH",
ylab = "log(error)", lwd = 2, col = "blue")
abline(v = df$pH[id], lty = 2, col = "red", lwd = 2)
# 10: plot distribution diagrams
matplot(x = df$pH, y = df[ , 5:7], type = "l",
xlab = "pH", ylab = "concentration")
matplot(x = df$pH, y = log10(df[ , 3:7]), type = "l",
xlab = "pH", ylab = "log(concentration)")
nleqslv
bicarbonate <- function(x) {
ka1 = 4.3e-7
ka2 = 4.8e-11
kw = 1.0e-14
conc = 0.1
# x[1] = H3O+; x[2] = OH-; x[3] = H2CO3; x[4] = HCO3-; x[5] = CO32-
KA1 = ka1 - (x[1] * x[4] / x[3])
KA2 = ka2 - (x[1] * x[5] / x[4])
KW = kw - (x[1] * x[2])
MB = conc - x[3] - x[4] - x[5]
CB = x[1] + conc - x[2] - x[4] - (2 * x[5])
return(c(KA1, KA2, KW, MB, CB))
}
nleqslv(x = c(1e-7, 1e-7, 0.001, 0.1, 0.001),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
nleqslv(x = c(0.1, 0.1, 0.1, 0.1, 0.1),
fn = bicarbonate,
control = list(xtol = 1e-12, ftol = 1e-12))
nleqslv(x = rep(0.1, 5),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
shiny::runApp('~/Box Sync/p-harvey/Teaching/R-Project/Summer2019/mike_final')
nleqslv(x = c(1e-7, 1e-7, 1e-8, 1e-6, 1e-8),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
bicarbonate <- function(x) {
ka1 = 4.3e-7
ka2 = 4.8e-11
kw = 1.0e-14
conc = 1e-6
# x[1] = H3O+; x[2] = OH-; x[3] = H2CO3; x[4] = HCO3-; x[5] = CO32-
KA1 = ka1 - (x[1] * x[4] / x[3])
KA2 = ka2 - (x[1] * x[5] / x[4])
KW = kw - (x[1] * x[2])
MB = conc - x[3] - x[4] - x[5]
CB = x[1] + conc - x[2] - x[4] - (2 * x[5])
return(c(KA1, KA2, KW, MB, CB))
}
nleqslv(x = c(1e-7, 1e-7, 1e-8, 1e-6, 1e-8),
fn = bicarbonate,
control = list(xtol = 1e-14, ftol = 1e-14))
test = bicarbonate(x = c(1e-7, 1e-7, 1e-8, 1e-6, 1e-8))
test
test = bicarbonate(x = c(0.1, 0.1, 0.1, 0.1, 0.1))
test
